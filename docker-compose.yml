version: "3"
services:
  redis:
    image: redis:alpine
    command: ["redis-server","/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    volumes:
          - ./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - webnet
  nginx:
    image: blackdog0403/nginx:v1
    healthcheck:
      test: ["CMD", "cat", "/var/run/nginx.pid"]
      interval: 30s
      timeout: 10s
      retries: 10
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - web-pri
      - web-sec
    volumes:
          - ./logs/nginx:/var/log/nginx/mydemoapp
          - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - webnet
  web-pri:
    image: blackdog0403/webapp:v1-session
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
#        delay: 60s
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
    volumes:
          - ./logs/web-pri:/App/springbootsampleapp/logs
    ports:
      - "4001:8080"
    networks:
      - webnet
  web-sec:
    image: blackdog0403/webapp:v1-session
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
#        delay: 60s
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
    volumes:
          - ./logs/web-sec:/App/springbootsampleapp/logs
    ports:
      - "4002:8080"
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080"]
#      interval: 10s
#      timeout: 10s
#      retries: 10
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet: